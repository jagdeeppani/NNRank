function K = FastConicalHull(M,r)

% FastConicalHull - Fast Conical Hull Algorithm for Near-separable 
% Non-negative Matrix Factorization
% 
% *** Description ***
% It recursively extracts r columns of the input matrix M:  at each step, 
% it selects a column of M corresponding to an extreme ray of the cone 
% generated by the columns of M, and then projects all the columns of M 
% on the cone generated by the columns of M extracted so far. 
%
% This is our implementation of XRAY(max) from A. Kumar, V. Sindhwani, and 
% P. Kambadur, Fast Conical Hull Algorithms for Near-separable Non-negative 
% Matrix Factorization, International Conference on Machine Learning, 2013 
% (ICML '13) (see also arXiv:1210.1190). 
% 
% K = FastConicalHull(M,r) 
%
% ****** Input ******
% M = WH + N : a noisy separable matrix, that is, W >=0, H = [I,H']P where 
%              I is the identity matrix, H'>= 0, P is a permutation matrix, 
%              and N is sufficiently small. 
% r          : number of columns to be extracted. 
%
% ****** Output ******
% K        : index set of the extracted columns corresponding to extreme
%            rays of cone(M)

[~,n] = size(M); 
R = M; % residual 
% p = ones(m,1); % as suggested in arXiv:1210.1190
% p = unifrnd(0.5,1.5,m,1);

K = []; 
c=sum(M,1); % c is same as p'*M where p = ones(m,1);

R_norm = zeros(n,1);
for k = 1 : r
    % Extract an extreme ray
    if k==1
        normR = sum(R.^2); 
        [~,i] = max(normR);
        rsd = R(:,i);
    else
        crntM = M(:,K);
        
        for l=1:n
            R_norm(l) = norm( M(:,l)- crntM*H(:,l),2 );
        end
        [~,idx] = max(R_norm);
        rsd = M(:,idx) - crntM * H(:,idx);
    end
    
    
    
%     [~,j] = max( (R(:,i)'*M)./(p'*M+1e-16) );
[~,j] = max( (rsd'*M)./(c) );
    % Remark: If 1e-16 is replaced with 1e-9, then it fails on the Swimmer
    % data set. 
    K = [K; j]; 
    
    % Update residual 
    if k == 1
        H = nnlsHALSupdt(M,M(:,K)); 
    else
        h = zeros(1,n); h(j) = 1; 
        H = [H; h]; 
        H = nnlsHALSupdt(M,M(:,K),H); 
    end
%     R = M - M(:,K)*H; % This step has been changed to deal with large
%     datasets.
    % !Warning! R should not be computed explicitely in the sparse case.
    % We do it here for simplicity but this version is impractical for
    % large-scale sparse datasets (such as document datasets); but 
    % see arXiv:1210.1190. 
end

end % of function FastConicalHull
